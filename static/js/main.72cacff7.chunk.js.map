{"version":3,"sources":["Timer.js","Break.js","Session.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","className","id","this","type","formatNumber","min","sec","onClick","handleStartStop","handleClear","React","Component","Break","setBreak","break","src","Session","setWork","work","App","state","time","run","bind","tick","clearInterval","timerID","setInterval","setState","document","getElementById","pause","currentTime","by","n","t","ss","mm","length","play","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72cacff7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  \r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"timer\">\r\n        <span id=\"timer-label\">{this.props.type}</span><br />\r\n        <button id=\"time-left\">{this.props.formatNumber(this.props.min)}:\r\n          {this.props.formatNumber(this.props.sec)}</button><br />\r\n        <button id=\"start_stop\"  onClick={() => this.props.handleStartStop()}>start</button>\r\n        <button id=\"reset\" onClick={() => this.props.handleClear()}>reset</button>      \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;","import React from 'react';\r\n\r\nclass Break extends React.Component {\r\n  \r\n  render(){\r\n    \r\n    return (\r\n      <div>\r\n        <p id=\"break-label\">Break Length</p>\r\n        <button id=\"break-increment\" onClick={()=>this.props.setBreak(1)}>+</button>\r\n        <span id=\"break-length\">{this.props.break}</span>\r\n        <button id=\"break-decrement\" onClick={()=>this.props.setBreak(-1)}>-</button>\r\n    \r\n        <audio id='beep' src='https://www.raphaeluziel.com/sounds/beep.wav' />\r\n       </div>\r\n    );\r\n  }\r\n}\r\nexport default Break;","import React from 'react';\r\n\r\nclass Session extends React.Component {\r\n  render(){\r\n    return (\r\n      <div>\r\n        <p id=\"session-label\">Session Length</p>\r\n    <button id=\"session-increment\" onClick={()=>this.props.setWork(1)} >+</button>\r\n        <span id=\"session-length\">{this.props.work}</span>\r\n        <button id=\"session-decrement\" onClick={()=>this.props.setWork(-1)} >-</button>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Session;","import React from 'react';\nimport Timer from './Timer';\nimport Break from './Break';\nimport Session from './Session';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);  \n    \n    this.state = {\n    work: 25,\n    break: 5,\n    time: 25 * 60,\n    type: \"SESSION\",\n    run: -1,\n      min: 25,\n      sec: 0,\n  };\n  \n    this.setWork = this.setWork.bind(this);\n    this.setBreak = this.setBreak.bind(this);\n    this.tick = this.tick.bind(this);\n    this.handleStartStop = this.handleStartStop.bind(this);\n     this.handleClear = this.handleClear.bind(this);\n   \n  }\n  \n  handleStartStop(){\n    clearInterval(this.timerID);\n    this.timerID = setInterval(() => this.tick(), 1000);\n    this.setState({ run: this.state.run *= -1 });\n  }\n  \n  handleClear(){\n    clearInterval(this.timerID);\n     document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0;\n    this.setState({ \n      type: 'SESSION', \n      work: 25, \n      break: 5, \n      min: 25, \n      sec: 0, \n      run: this.state.run = -1, \n      time: 25 * 60,\n    });\n  }\n \n  setWork(by){\n    // Prevent setting session lengths less than 0 or greater than 60\n    if(this.state.work + by > 0 && this.state.work + by < 61){\n      // If in session mode change session length and reflect it in time left\n      if (this.state.type === 'SESSION'){\n        this.setState({ \n          sec: 0, \n          min: this.state.work + by, \n          work: this.state.work + by, \n          time: 60 * (this.state.work  + by)\n        });\n      }\n      // Otherwise, change session length, but leave time left alone\n      else{\n        this.setState({ \n          work: this.state.work + by \n        });\n      }   \n    }\n  }\n  \n  setBreak(by){\n    // See comments for changeSessionLength above\n    if(this.state.break + by > 0 && this.state.break + by < 61){\n      if (this.state.type === 'break'){\n        this.setState({ \n          sec: 0, \n          min: this.state.break + by, \n          break: this.state.break + by, \n          time: 60 * (this.state.break + by)\n        });\n      }\n      else{\n        this.setState({ break: this.state.break + by });\n      }   \n    }\n  }\n\n  \n  formatNumber(n){\n    if (n < 10){\n      return '0' + n;\n    }\n    else{\n      return n;\n    }\n  }\n  \n  tick() {\n    if (this.state.run === 1){\n      var t = this.state.time - 1;\n      var ss = t % 60;  //Calculates number of seconds\n      var mm = (t - ss) / 60;  // Calculates number of minutes\n      var type = this.state.type;\n      var length = this.state.work;\n      \n      // Toggle session types\n      if (type === 'SESSION') {\n        type = 'break';\n        length = this.state.break;\n      } \n      else{\n        type = 'SESSION';\n        length = this.state.work;\n      } \n      \n      // When time reaches zero, play sound, and toggle session type\n      if (t === 0){\n        t = length * 60;\n        document.getElementById('beep').play();\n        this.setState({time: t+1, min: mm, sec: 0, type: type});\n      }\n      \n      // Otherwise, just count down\n      else{\n        this.setState({time: t, min: mm, sec: ss});\n      }     \n    }  \n  }\n  \n  render(){\n    return(\n    <div className=\"main\">\n        <h1>Promodoro Clock</h1>\n        \n       <Timer \n         type = {this.state.type}\n         time = {this.state.time}\n         min = {this.state.min}\n         sec = {this.state.sec}\n         formatNumber = {this.formatNumber}\n         handleStartStop = {this.handleStartStop}\n         handleClear = {this.handleClear}\n         />\n        \n      <Session \n        work = {this.state.work}\n        setWork = {this.setWork}\n       \n        />\n        <Break\n        break={this.state.break}\n        setBreak = {this.setBreak}\n        \n        />\n     </div>);\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}